# -*- coding: utf-8 -*-
"""
Created on Sat Nov  2 01:53:13 2019

@author: hayari
"""

import ctypes
import numpy
import imageio
from os.path import expanduser

# set the directory for the c .so
home_dir = expanduser("~")
LIBTEST = 'C:\Users\hayari\Documents\python/'

# load the .so (dynamic library) using ctypes
EMX = ctypes.cdll.LoadLibrary(LIBTEST + 'mypyr.so')
init = EMX. makePyramid_2D_initialize()
print '\nInitialize...\n'
data_in = imageio.imread(LIBTEST + 'test.tif')
#data_in =data_in.astype(float)


TestEmxAPI(data_in)

   

def TestEmxAPI(data_in):
   # Create a data structure to hold the pointer generated by 
    #  emxCreateWrapper...
    class Opaque(ctypes.Structure):
        pass
    
    L = len(data_in)
    # create an empty array of the same size for the output
    data_ou = [0] * L
    sz=(data_in.shape)
   

    
 
#    class Pyr(ctypes.Structure): 
#        _fields_ = [('img', (ctypes.c_double*sz[0])*sz[1]), ('gradX', (ctypes.c_double*sz[0])*sz[1]),('gradY', (ctypes.c_double*sz[0])*sz[1])] 
##
#    #oua = (ctypes.c_double * L)(*data_ou)
#    # create a pointer for these arrays & set the rows and columns of the matrix
#    inp = DoubleArrayType
#    #oup = ctypes.pointer(oua)
#    
    nrows = ctypes.c_int(sz[0])
    ncols = ctypes.c_int(sz[1])

    # use EMX.emxCreateWrapper_real_T(double *data, int rows, int cols) to generate an emx wrapping the data 
    # input arg types are a pointer to the data NOTE it's not great to have to resize the ctypes.c_double
#    EMX.emxCreateWrapper_real_T.argtypes = (DoubleArray, ctypes.c_int, ctypes.c_int)
##    # a pointer to the emxArray is returned and stored in Opaque
#    EMX.emxCreateWrapper_real_T.restype = ctypes.POINTER(Opaque)
  
   # pp=Pyr()
#    in_emx = EMX.emxCreateWrapper_real_T(data_in.ctypes.data, csz[0], sz[1])
    in_emx = EMX.emxCreateWrapper_real_T(ctypes.c_int(data_in.ctypes.data), nrows,ncols) 
#    EMX.emxCreateWrapper_struct0_T.argtypes=(ctypes.Pointer(Pyr),ctypes.c_int,ctypes.c_int)
#    EMX.emxCreateWrapper_struct0_T.restype = ctypes.POINTER(Opaque)
#    ou_emx = emxCreateWrapper_struct0_T(pp,sz[0], sz[1])
#    
   # (DoubleArray, ctypes.cdouble, ctypes.cdouble,(ctypes.cdouble)*level,ctypes.pointer(Pyr)
    # so now we have to emx's created and have pointers to them we can run the emx_test
    # emx test looks like this in matlab
    #
    # function res = emx_test ( in )
    #     res = in .* in;
    # end
    #
    # so basically it multiplies each element of the matrix by itself
    # 
    # therefore [1., 2., 4., 8., 16.] should become [1., 4., 8., 64., 256.]

#    EMX.emx_test(in_emx, ou_emx)
#    
#    # clear the heap removing the emx 
#    EMX.emxDestroyArray_real_T(in_emx)
#    EMX.emxDestroyArray_real_T(ou_emx)
 

    return data_ou

