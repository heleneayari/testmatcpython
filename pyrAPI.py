# -*- coding: utf-8 -*-
"""
Ã‰diteur de Spyder

Ceci est un script temporaire.
"""

import ctypes
import numpy as np


# set the directory for the c .so

LIBTEST = 'C:\Users\hayari\Documents\python/'

# load the .so (dynamic library) using ctypes
EMX = ctypes.cdll.LoadLibrary(LIBTEST + 'mypyr.so')
init = EMX. makePyramid_2D_initialize()
print '\nInitialize...\n'





def TestEmxAPI(data_in):
   # Create a data structure to hold the pointer generated by 
    #  emxCreateWrapper...
    class Opaque(ctypes.Structure):
        pass
 
    sz=(data_in.shape)
   

    
    class Pyr(ctypes.Structure): 
        _fields_ = [('img', (ctypes.c_double*sz[0])*sz[1]), ('gradX', (ctypes.c_double*sz[0])*sz[1]),('gradY', (ctypes.c_double*sz[0])*sz[1])] 
##
#    #oua = (ctypes.c_double * L)(*data_ou)
#    # create a pointer for these arrays & set the rows and columns of the matrix
#    inp = DoubleArrayType
#    #oup = ctypes.pointer(oua)
#    
    nrows = ctypes.c_int(sz[0])
    ncols = ctypes.c_int(sz[1])
    level=1
    blur=-1
    win=np.array([10.,10.,10.])
    winc= (ctypes.c_double *3)(*win)
    # use EMX.emxCreateWrapper_real_T(double *data, int rows, int cols) to generate an emx wrapping the data 
    # input arg types are a pointer to the data NOTE it's not great to have to resize the ctypes.c_double
#    EMX.emxCreateWrapper_real_T.argtypes = (DoubleArray, ctypes.c_int, ctypes.c_int)
###    # a pointer to the emxArray is returned and stored in Opaque
#    EMX.emxCreateWrapper_real_T.restype = ctypes.POINTER(Opaque)
  
    pp=Pyr()
    
    #in_emx = EMX.emxCreateWrapper_real_T(data_in, sz[0], sz[1])
    in_emx = EMX.emxCreateWrapper_real_T(ctypes.c_int(data_in.ctypes.data), nrows,ncols) 
    EMX.emxCreateWrapper_struct0_T.argtypes=(ctypes.POINTER(Pyr),ctypes.c_int,ctypes.c_int)
    EMX.emxCreateWrapper_struct0_T.restype = ctypes.POINTER(Pyr)
    ou_emx = EMX.emxCreateWrapper_struct0_T(pp,sz[0], sz[1])

   
    EMX.makePyramid_2D(in_emx, ctypes.c_double(level),ctypes.c_double(blur),winc, ou_emx)
#    
#    # clear the heap removing the emx 
#    EMX.emxDestroyArray_real_T(in_emx)
#    EMX.emxDestroyArray_real_T(ou_emx)
 

    return pp
